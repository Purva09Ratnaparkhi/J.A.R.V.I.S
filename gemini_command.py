import os
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()
genai.configure(api_key=os.getenv('gemini_key'))

# Create the model
generation_config = {
  "temperature": 1,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
    # safety_settings = Adjust safety settings
    # See https://ai.google.dev/gemini-api/docs/safety-settings
    system_instruction="You are a AI assitant name JARVIS which helps to automate tasks performed on ones computer and also can help you with coding and even can chat with you. JARVIS stands for Just a rather very intelligent system. You have been devoleped by students of A I & D S. Now you are in command mode and have to only return sepcific text.",
    )

def  generate_text(prompt):
  response = model.generate_content([
   "input: open [app name]",
  "output: func [\"open_app\", \"app name\"]",
  "input: open app [app name]",
  "output: func [\"open_app\", \"app name\"]",
  "input: open spotify",
  "output: func [\"open_app\", \"spotify\"]",
  "input: Launch [app name]",
  "output: func [\"open_app\", \"app name\"]",
  "input: Start [app name]",
  "output: func [\"open_app\", \"app name\"]",
  "input: Run [app name]",
  "output: func [\"open_app\", \"app name\"]",
  "input: Launch Microsoft Word",
  "output: func [\"open_app\", \"Microsoft Word\"]",
  "input: Start Spotify",
  "output: func [\"open_app\", \"spotify\"]",
  "input: Run Calculator",
  "output: func [\"open_app\", \"calculator\"]",
  "input: open spotify and whatsapp",
  "output: func [\"open_app\", \"calculator\", \"open_app\",\"whatsapp\"]",
  "input: open spotify and notepad",
  "output: func [\"open_app\", \"calculator\", \"open_app\",\"notepad\"]",
  "input: start word and chrome",
  "output: func [\"open_app\", \"word\", \"open_app\",\"chrome\"]",
  "input: close [app name]",
  "output: func [\"close_app\", \"app name\"]",
  "input: close [app name] app",
  "output: func [\"close_app\", \"app name\"]",
  "input: close [app name] application",
  "output: func [\"close_app\", \"app name\"]",
  "input: close spotify",
  "output: func [\"close_app\", \"spotify\"]",
  "input: close chrome",
  "output: func [\"close_app\", \"chrome\"]",
  "input: close word",
  "output: func [\"close_app\", \"word\"]",
  "input: quit [app name]",
  "output: func [\"close_app\", \"app name\"]",
  "input: quit notepad",
  "output: func [\"close_app\", \"notepad\"]",
  "input: quit spotify",
  "output: func [\"close_app\", \"spotify\"]",
  "input: close word ans spotify",
  "output: func [\"close_app\", \"word\",\"close_app\", \"spotify\"]",
  "input: quit notepad as well as calculator",
  "output: func [\"close_app\", \"notepad\",\"close_app\", \"calculator\"]",
  "input: open youtube",
  "output: func [\"open_youtube\"]",
  "input: open youtube on chrome",
  "output: func [\"open_youtube\"]",
  "input: start youtube",
  "output: func [\"open_youtube\"]",
  "input: launch youtube",
  "output: func [\"open_youtube\"]",
  "input: search [search string] on youtube",
  "output: func [\"search_on_youtube\",\"search string\"]",
  "input: search c programming on youtube",
  "output: func [\"search_on_youtube\",\"c programming\"]",
  "input: play until I found you on youtube",
  "output: func [\"search_on_youtube\",\"until I found you\"]",
  "input: play [search string] on youtube",
  "output: func [\"search_on_youtube\",\"search string\"]",
  "input: pause video",
  "output: func [\"pause_video\"]",
  "input: pause youtube video",
  "output: func [\"pause_video\"]",
  "input: pause",
  "output: func [\"pause_video\"]",
  "input: restart video",
  "output: func [\"restart_video\"]",
  "input: restart youtube video",
  "output: func [\"restart_video\"]",
  "input: restart",
  "output: Please be clear with you request, what do you want to restart. (eg. system, video, etc)",
  "input: mute video",
  "output: func [\"mute_video\"]",
  "input: mute youtube video",
  "output: func [\"mute_video\"]",
  "input: skip video",
  "output: func[\"skip_video\"]",
  "input: skip 10 seconds of video",
  "output: func [\"skip_video\"]",
  "input: forward video",
  "output: func [\"skip_video\"]",
  "input: skip youtube video",
  "output: func [\"skip_video\"]",
  "input: forward youtube video",
  "output: func [\"skip_video\"]",
  "input: revert video 10 seconds bavk",
  "output: func [\"back_video\"]",
  "input: revert youtube video",
  "output: func [\"back_video\"]",
  "input: go back 10 seconds",
  "output: func [\"back_video\"]",
  "input: rewind video",
  "output: func [\"back_video\"]",
  "input: close youtube",
  "output: func [\"close_youtube\"]",
  "input: quit youtube",
  "output: func [\"close_youtube\"]",
  "input: exit youtube",
  "output: func [\"close_youtube\"]",
  "input: make youtube full screen",
  "output: func [\"fullscreen_video\"]",
  "input: go full screen",
  "output: func [\"fullscreen_video\"]",
  "input: make video full screen",
  "output: func [\"fullscreen_video\"]",
  "input: make youtube video fullscreen",
  "output: func [\"fullscreen_video\"]",
  "input: open film mode",
  "output: func [\"film_mode\"]",
  "input: start film mode",
  "output: func [\"film_mode\"]",
  "input: play video in film mode",
  "output: func [\"film_mode\"]",
  "input: play youtube video in film mode",
  "output: func [\"film_mode\"]",
  "input: search [search string] on internet",
  "output: func [\"search_on_internet\", \"[search string]\"]",
  "input: search today's news on internet",
  "output: func [\"search_on_internet\", \"today's news\"]",
  "input: search [search string] on browser",
  "output: func [\"search_on_internet\", \"[search string]\"]",
  "input: search geeks for geeks on browser",
  "output: func [\"search_on_internet\", \"geeks for geeks\"]",
  "input: search [search string] on google",
  "output: func [\"search_on_internet\", \"[search string]\"]",
  "input: search India on google",
  "output: func [\"search_on_internet\", \"India\"]",
  "input: open browser",
  "output: func [\"open_browser\"]",
  "input: start browser",
  "output: func [\"open_browser\"]",
  "input: search on google",
  "output: func [\"open_browser\"]",
  "input: search on internet",
  "output: func [\"open_browser\"]",
  "input: search on browser",
  "output: func [\"open_browser\"]",
  "input: open recently closed tab",
  "output: func [\"open_recently_closed_tab\"]",
  "input: open last tab",
  "output: func [\"open_recently_closed_tab\"]",
  "input: open previous tab",
  "output: func [\"open_recently_closed_tab\"]",
  "input: open previously closed tab",
  "output: func [\"open_recently_closed_tab\"]",
  "input: open  recent tab",
  "output: func [\"open_recently_closed_tab\"]",
  "input: open downloads",
  "output: func [\"open_download\"]",
  "input: view downloads",
  "output: func [\"open_download\"]",
  "input: show download list",
  "output: func [\"open_download\"]",
  "input: open downloads list",
  "output: func [\"open_download\"]",
  "input: open history",
  "output: func [\"open_history\"]",
  "input: view history",
  "output: func [\"open_history\"]",
  "input: show history",
  "output: func [\"open_history\"]",
  "input: history",
  "output: func [\"open_history\"]",
  "input: show history",
  "output: func [\"open_history\"]",
  "input: show history list",
  "output: func [\"open_history\"]",
  "input: open history list",
  "output: func [\"open_history\"]",
  "input: open new window",
  "output: func [\"open_new_window\"]",
  "input: open new browser",
  "output: func [\"open_new_window\"]",
  "input: open new browser window",
  "output: func [\"open_new_window\"]",
  "input: open new tab",
  "output: func [\"open_new_tab\"]",
  "input: new tab",
  "output: func [\"open_new_tab\"]",
  "input: start new tab",
  "output: func [\"open_new_tab\"]",
  "input: Take a screenshot",
  "output: func [\"take_screenshot\"]",
  "input: screenshot my screen",
  "output: func [\"take_screenshot\"]",
  "input: take snapshot of my screen",
  "output: func [\"take_screenshot\"]",
  "input: capture my screen",
  "output: func [\"take_screenshot\"]",
  "input: shutdown",
  "output: Please be clear with you request, what do you want to shutdown.",
  "input: shutdown my system",
  "output: func [\"shutdown_sys\"]",
  "input: shutdown my computer",
  "output: func [\"shutdown_sys\"]",
  "input: turn off my computer",
  "output: func [\"shutdown_sys\"]",
  "input: shut down my pc",
  "output: func [\"shutdown_sys\"]",
  "input: shut down my laptop",
  "output: func [\"shutdown_sys\"]",
  "input: turn off my laptop",
  "output: func [\"shutdown_sys\"]",
  "input: turn of my computer",
  "output: func [\"shutdown_sys\"]",
  "input: restart my system",
  "output: func [\"restart_sys\"]",
  "input: restart my computer",
  "output: func [\"restart_sys\"]",
  "input: restart system",
  "output: func [\"restart_sys\"]",
  "input: restart computer",
  "output: func [\"restart_sys\"]",
  "input: restart laptop",
  "output: func [\"restart_sys\"]",
  "input: restart my laptop",
  "output: func [\"restart_sys\"]",
  "input: restart my pc",
  "output: func [\"restart_sys\"]",
  "input: restart pc",
  "output: func [\"restart_sys\"]",
  "input: Let's wrap up this command",
  "output: func [\"exit\"]",
  "input: I'd like to end this conversation",
  "output: func [\"exit\"]",
  "input: Can we exit command mode",
  "output: func [\"exit\"]",
  "input: exit command mode",
  "output: func [\"exit\"]",
  "input: quit command mode",
  "output: func [\"exit\"]",
  "input: end command mode",
  "output: func [\"exit\"]",
  "input: Would you mind if we end command mode",
  "output: func [\"exit\"]",
  "input: exit command",
  "output: func [\"exit\"]",
  "input: exit",
  "output: func [\"exit\"]",
  "input: stop command mode",
  "output: func [\"exit\"]",
  "input: exit mode",
  "output: func [\"exit\"]",
  "input: close tab",
  "output: func [\"close_tab\"]",
  "input: close current tab",
  "output: func [\"close_tab\"]",
  "input: close this tab",
  "output: func [\"close_tab\"]",
  "input: create a image of cozy cabin in the woods during winter with snow on the roof",
  "output: func [\"generate_image\", \"A cozy cabin in the woods during winter with snow on the roof.\"]",
  "input: create a image for an aerial view of a crystal clear lake surrounded by pine trees",
  "output: func [\"generate_image\", \"An aerial view of a crystal clear lake surrounded by pine trees.\"]",
  "input: jarvis create a image of a dense forest with sun rays filtering through the trees",
  "output: func [\"generate_image\", \"A dense forest with sun rays filtering through the trees.\"]",
  "input: can you create image of a futuristic cityscape with flying cars and tall skyscrapers.",
  "output: func [\"generate_image\", \"A futuristic cityscape with flying cars and tall skyscrapers.\"]",
  "input: please create a image of a mountain landscape covered in snow at sunrise",
  "output: func [\"generate_image\", \"A mountain landscape covered in snow at sunrise.\"]",
  "input: jarvis can you please create image of a close-up of a blooming red rose.",
  "output: func [\"generate_image\", \"A close-up of a blooming red rose.\"]",
  "input: create a visuals of busy city street in the evening with neon lights.",
  "output: func [\"generate_image\", \"A busy city street in the evening with neon lights.\"]",
  "input: create a image showcasing serene beach scene at sunset with pink skies.",
  "output: func [\"generate_image\", \"A serene beach scene at sunset with pink skies.\"]",
  "input: the",
  "output: sorry, I didnt understand that.",
  "input: re",
  "output: sorry, I didnt understand that.",
  f"input: {prompt}",
  "output: ",
])
  return response.text

# print(generate_text("close a tab"))