import os
import google.generativeai as genai
# os.environ.get("gemini_key")
genai.configure(api_key=os.environ.get('gemini_key'))

# Create the model
generation_config = {
  "temperature": 0.4,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
    # safety_settings = Adjust safety settings
    # See https://ai.google.dev/gemini-api/docs/safety-settings
    system_instruction="You are a AI assitant name JARVIS which helps to automate tasks performed on ones computer and also can help you with coding and even can chat with you. JARVIS stands for Just a rather very intelligent system. You have been devoleped by students of A I D S. You are in command mode right now where you have to return specified output only for specific type of input. ",
    )

def  generate_text(prompt):
  response = model.generate_content([
  "input: create a new file",
  "output: func [\"new_file\"]",
  "input: write a new file",
  "output: func [\"new_file\"]",
  "input: create a new code",
  "output: func [\"new_file\"]",
  "input: write a new code",
  "output: func [\"new_file\"]",
  "input: start a new code",
  "output: func [\"new_file\"]",
  "input: start a new file",
  "output: func [\"new_file\"]",
  "input: start with new file",
  "output: func [\"new_file\"]",
  "input: create a new project",
  "output: func [\"new_project\"]",
  "input: start a new project",
  "output: func [\"new_project\"]",
  "input: start from scratch",
  "output: func [\"new_project\"]",
  "input: can you create a new file",
  "output: func [\"new_file\"]",
  "input: please create a new file for me jarvis",
  "output: func [\"new_file\"]",
  "input: can you create an new file jarvis",
  "output: func [\"new_file\"]",
  "input: I would like you to write a new file for me",
  "output: func [\"new_file\"]",
  "input: write a code for Fibonacci in python",
  "output: func [\"generate_code\",\"write a code for Fibonacci in python\"]",
  "input: write a code for palindrome in c++",
  "output: func [\"generate_code\",\"write a code for palindrome in c++\"]",
  "input: write a code for addition of two numbers in cpp",
  "output: func [\"generate_code\",\"write a code for addition of two numbers in cpp\"]",
  "input: write a code for creating a html page",
  "output: func [\"generate_code\",\"write a code for creating a html page\"]",
  "input: write a code for login form in php",
  "output: func [\"generate_code\",\"write a code for login form in php\"]",
  "input: hey jarvis will create a hangman game for me in python",
  "output: func [\"generate_code\",\"create a hangman game for me in python\"]",
  "input: write a code for Fibonacci",
  "output: please mention language in which I have to write the code.",
  "input: write a code for palindrome",
  "output: please mention language in which I have to write the code.",
  "input: write a code for addition of two numbers",
  "output: please mention language in which I have to write the code.",
  "input: create a code for Fibonacci in python",
  "output: func [\"generate_code\",\"write a code for Fibonacci in python\"]",
  "input: write a program for Fibonacci in python",
  "output: func [\"generate_code\",\"write a code for Fibonacci in python\"]",
  "input: create a program for Fibonacci in python",
  "output: func [\"generate_code\",\"write a code for Fibonacci in python\"]",
  "input: create a new file and write a code for Fibonacci in python",
  "output: func [\"new_file\",\"generate_code\",\"write a code for Fibonacci in python\"]",
  "input: create a new project and then a new file",
  "output: func [\"new_project\",\"new_file\"]",
  "input: save the file",
  "output: func [\"save_file\"]",
  "input: save the progress",
  "output: func [\"save_file\"]",
  "input: save the program",
  "output: func [\"save_file\"]",
  "input: save",
  "output: func [\"save_file\"]",
  "input: save the project",
  "output: func [\"save_file\"]",
  "input: Let's wrap up this code",
  "output: func [\"exit\"]",
  "input: I'd like to end this conversation",
  "output: func [\"exit\"]",
  "input: Can we exit code mode",
  "output: func [\"exit\"]",
  "input: exit code mode",
  "output: func [\"exit\"]",
  "input: quit code mode",
  "output: func [\"exit\"]",
  "input: end code mode",
  "output: func [\"exit\"]",
  "input: Would you mind if we end code mode",
  "output: func [\"exit\"]",
  "input: exit code",
  "output: func [\"exit\"]",
  "input: exit",
  "output: func [\"exit\"]",
  "input: stop code mode",
  "output: func [\"exit\"]",
  "input: exit mode",
  "output: func [\"exit\"]",
  "input: close this file",
  "output: func [\"close_file\"]",
  "input: can you please close this file jarvis",
  "output: func [\"close_file\"]",
  "input: jarvis close this file",
  "output: func [\"close_file\"]",
  "input: close this file jarvis",
  "output: func [\"close_file\"]",
  "input: run this file jarvis",
  "output: func [\"run_code\"]",
  "input: run this code jarvis",
  "output: func [\"run_code\"]",
  "input: execute this file jarvis",
  "output: func [\"run_code\"]",
  "input: run this file",
  "output: func [\"run_code\"]",
  "input: execute this file",
  "output: func [\"run_code\"]",
  "input: run this code",
  "output: func [\"run_code\"]",
  "input: execute this code",
  "output: func [\"run_code\"]",
  f"input: {prompt}",
  "output: ",
])
  return response.text
  
  
# print(generate_text("make a new file"))